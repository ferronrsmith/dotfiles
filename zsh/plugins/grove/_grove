#!/bin/bash
#compdef grove

typeset -A opt_args


############ helper function start #################

_gcloud () {
    gcloud compute $1 list
}

_gcloud_list () {
    gcloud compute $1 list --regexp .\*-.\*-.\*-.\* | awk '{ if (NR > 1) { printf "%s ", $1; } }'
}

_zones () {
    _gcloud_list zones
}

_instance_names () {
    _gcloud_list instances
}

_networks () {
    _gcloud networks | awk '{ if (NR > 1) { printf "%s ", $1; } }'
}

_groves () {
    gcloud compute instances list --regexp .\*-.\*-.\*-.\* | awk '{ if (NR > 1) { print $1; } }' | awk -F- '{ print $(NF-1) }' | uniq |  awk '{ printf "%s ", $1; }'
}


_debug () {
    echo "\n###############"
    echo "\n1 ... $words"
    echo "\n2 ... $CURRENT"
    echo "\n3 ... $words[CURRENT-1]"
    echo "\n4 ... ${words[CURRENT-1]}"
    echo "\n###############"
}

############ helper function end ###################


############ array instances start #################

list_opts=(
    "--grove-id:restricts listing by grove identifier"
    "--type:restricts listing by instance type"
    "--zone:restricts listing by instance zone"
    "--instance-id:restricts listing by instance identifier"
    "--sort:sorts listing by field"
)

# cache zone. _zones seems very slow
zones_opts=(
    "us-central1-a:US Region Zone A. Sandy Bridge Processor Type"
    "us-central1-b:US Region Zone B. Sandy Bridge Processor Type"
    "us-central1-f:US Region Zone F. Ivy Bridge Processor Type"
    "europe-west1-a:Europian Region Zone A (deprecated). Sandy Bridge Processor Type"
    "europe-west1-b:Europian Region Zone B. Sandy Bridge Processor Type"
    "asia-east1-a:Asian Region Zone A. Ivy Bridge Processor Type"
    "asia-east1-b:Asian Region Zone B. Ivy Bridge Processor Type"
    "asia-east1-c:Asian Region Zone C. Ivy Bridge Processor Type"
)

type_opts=(
    'command-center:command center node'
    'data:data node'
    'elastic-search:elastic search node'
    'mongo:mongo database node'
)

network_opts=(
    'add:add a network'
    'delete:delete a network'
    'list:list all networks'
)

firewall_opts=(
    'add:add a firewall rule'
    'add-file:add a firewall rule using configuration from a file'
    'delete:delete a firewall rule'
    'list:list all firewall rules'
)

instance_opts=(
    'add:add a instance to a grove'
    'delete:delete an instance from a grove'
    'list:list all instances in grove(s)'
)



############ array instances end ###################

_arguments -C \
  '1:cmd:->cmds' \
  '2:generators:->generator_lists' \
  '*:: :->args' \
&& ret=0

case "$state" in
    (cmds)
    local commands; commands=(
        "add:add a node to an existing grove"
        "copy:copy a grove to another"
        "create:Create a new grove"
        "delete:Delete a grove and all attached instances"
        "list:List all groves & its instances"
        "migrate:Move/Migrate a grove to another network"
        "network:Configure a grove networking"
        "firewall:Configure a grove firewall"
        "instance:Configure a grove instance"
        "remove:Remove an instance from a grove"
    )
        _describe -t commands 'command' commands && ret=0
    ;;
    (generator_lists)
        case $line[1] in
            (list)
                _describe -t list_opts 'list' list_opts && ret=0
            ;;
            (delete)
                local groves; groves=($(_groves))
                _describe -t groves 'delete' groves && ret=0
            ;;
            (add)
                _describe -t zones_opts 'add' zones_opts && ret=0
            ;;
            (network|instance|firewall)
                _describe -t "${line[1]}_opts" 'add' "${line[1]}_opts" && ret=0
            ;;
        esac
    ;;
    (args)
        # sub-level command e.g. grove instance add
        case $line[1] in
            (list)
                case "${words[CURRENT-1]}" in
                    (--type)
#                        _debug
                        _describe -t type_opts 'type' type_opts && ret=0
                        return 0
                    ;;
                    (--zone)
                        _describe -t zones_opts 'add' zones_opts && ret=0
                        return 0
                    ;;
                esac

                # if the line command is list then show list options
                _describe -t list_opts 'list' list_opts && ret=0
            ;;
            (add)
#                _debug
                case "${CURRENT}" in
                    3)
                        _describe -t type_opts 'type' type_opts && ret=0
                    ;;
                    4)
                        ## should handle state 4 in future versions
                        return 0
                    ;;

                esac
#                if [ CURRENT == 3 ]; then
#                    _describe -t type_opts 'type' type_opts && ret=0
#                elif [ CURRENT == 4 ]; then
                    #
#                    echo ">>>>"
#                fi
            ;;
            (network)
#                _debug
                case "${words[CURRENT-1]}" in
                    delete)
                        local networks; networks=($(_networks))
                        _describe -t networks 'delete' networks && ret=0
                    ;;
                esac
            ;;
            (instance)
                case "${words[CURRENT-1]}" in
                    delete)
                        local instances; instances=($(_instance_names))
                        _describe -t instances 'remove' instances && ret=0
                    ;;
                esac
            ;;
            (firewall)
                case "${words[CURRENT-1]}" in
                    add-file)
                        local flags; flags=(
                            '--default':'[use the default firewall configuration to create rules]'
                            '--grove':'[grove identifier]'
                            '--g':'[grove identifier]'
                            '--file':'[specify the template file to be load firewall-rules from]'
                            '--f':'[specify the template file to be load firewall-rules from]'
                            '-d':'[use the default firewall configuration to create rules]'
                         )
                        _describe -t flags 'firewall' flags && ret=0
                    ;;
                esac
            ;;
        esac
    ;;
esac

return 1
