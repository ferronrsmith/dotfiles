[color]
    ui = auto
[user]
    name = ferron
    email = ferronrsmith@gmail.com
[alias]
    s = status
    c = commit
    uc = reset --soft
    p = push
    u = pull
    cm = !git commit -m
    ca = !git commit -am
    a = !git add --all && git status
    b = branch
    co = checkout
    d = diff
    q = !git add --all && git status && git commit -am 'quick update' && git push
    undo = reset --hard
    rev = checkout HEAD
    r = checkout HEAD
    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg = !"git lg1"
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    # View the current working tree status using the short format
    s = status -s
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull --rebase; git submodule foreach git pull origin master"
    # Clone a repository including all submodules
    cl = clone --recursive
    # Commit all changes
    ca = !git add -A && git commit -av
    # Switch to a branch, creating it if necessary
    go = checkout -B
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    # Remove branches that have already been merged with master
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # fetch all remote branches and remove branches that no longer exists
    fa = fetch --all --prune
    pr = pull --rebase
    # YAWD
    dw = diff --word-diff=color
    # Spell check your git commits with aspell
    spell = !git log --pretty=format:%s%n%n%b -n1 > /tmp/aspell.txt && aspell -c /tmp/aspell.txt && git commit --amend -F /tmp/aspell.txt
    # Commit changes to current head as amended commit
    plus = commit --amend -a -C HEAD
    sdiff = !git diff && git submodule foreach 'git diff'
    # new merge
    merge2 = merge --squash --no-ff --log
[core]
    editor = vim
    autocrlf = false
    safecrlf = warn
    excludesfile = ~/personal_git/dotfiles/git/gitignore.properties
	filemode = false
[diff]
    tool = vimdiff
    submodule = log
[merge]
    tool = meld

[mergetool]
    keepBackup = false

[fetch]
    prune = true

[credential]
    helper = cache

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

# URL shorthands

[branch]
    autoSetupRebase = always    

[push]
  default = tracking

[pull]
  rebase = true

[pack]
    threads=0

[rebase]
    stat = true

[status]
    submoduleSummary = 1

[log]
  date = relative
